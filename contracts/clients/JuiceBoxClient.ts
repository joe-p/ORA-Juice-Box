/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(application,asset)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoORA()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mine(pay,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim(uint64,address,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "orangeApp": {
          "type": "uint64",
          "key": "orangeApp"
        },
        "orangeAsa": {
          "type": "uint64",
          "key": "orangeAsa"
        },
        "epoch": {
          "type": "uint64",
          "key": "epoch"
        },
        "totalOra": {
          "type": "uint64",
          "key": "totalOra"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "JuiceBox",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": ""
          },
          {
            "name": "asa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "optIntoORA",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "mine",
        "args": [
          {
            "name": "mbrAndFeePayment",
            "type": "pay",
            "desc": "Payment to this app that covers the juice fee and any necessary MBRs"
          },
          {
            "name": "to",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "Mine ORA",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "claim",
        "args": [
          {
            "name": "epoch",
            "type": "uint64",
            "desc": "The epoch to claim from"
          },
          {
            "name": "to",
            "type": "address",
            "desc": "The address to send the ORA to"
          },
          {
            "name": "_ora",
            "type": "asset",
            "desc": "The ORA asset ID (for reference)"
          }
        ],
        "desc": "Claim ORA proportional to the amount juiced in the given epoch",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the JuiceBox smart contract.
 */
export type JuiceBox = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(application,asset)void' | 'createApplication', {
      argsObj: {
        app: number | bigint
        asa: number | bigint
      }
      argsTuple: [app: number | bigint, asa: number | bigint]
      returns: void
    }>
    & Record<'optIntoORA()void' | 'optIntoORA', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'mine(pay,address)void' | 'mine', {
      argsObj: {
        /**
         * Payment to this app that covers the juice fee and any necessary MBRs
         */
        mbrAndFeePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string
      }
      argsTuple: [mbrAndFeePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string]
      returns: void
    }>
    & Record<'claim(uint64,address,asset)void' | 'claim', {
      argsObj: {
        /**
         * The epoch to claim from
         */
        epoch: bigint | number
        /**
         * The address to send the ORA to
         */
        to: string
        /**
         * The ORA asset ID (for reference)
         */
        _ora: number | bigint
      }
      argsTuple: [epoch: bigint | number, to: string, _ora: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'orangeApp'?: IntegerState
      'orangeAsa'?: IntegerState
      'epoch'?: IntegerState
      'totalOra'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type JuiceBoxSig = keyof JuiceBox['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends JuiceBoxSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the JuiceBox smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends JuiceBoxSig> = JuiceBox['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the JuiceBox smart contract to the method's return type
 */
export type MethodReturn<TSignature extends JuiceBoxSig> = JuiceBox['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type JuiceBoxCreateCalls = (typeof JuiceBoxCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type JuiceBoxCreateCallParams =
  | (TypedCallParams<'createApplication(application,asset)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type JuiceBoxDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: JuiceBoxCreateCalls) => JuiceBoxCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class JuiceBoxCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the JuiceBox smart contract using the createApplication(application,asset)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(application,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(application,asset)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.app, args.asa],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optIntoORA()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoOra(args: MethodArgs<'optIntoORA()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optIntoORA()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mine(pay,address)void ABI method
   *
   * Mine ORA
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mine(args: MethodArgs<'mine(pay,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mine(pay,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrAndFeePayment, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim(uint64,address,asset)void ABI method
   *
   * Claim ORA proportional to the amount juiced in the given epoch
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claim(args: MethodArgs<'claim(uint64,address,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim(uint64,address,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.epoch, args.to, args._ora],
      ...params,
    }
  }
}

/**
 * A client to make calls to the JuiceBox smart contract
 */
export class JuiceBoxClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `JuiceBoxClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof JuiceBox['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the JuiceBox smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: JuiceBoxDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(JuiceBoxCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the JuiceBox smart contract using the createApplication(application,asset)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(application,asset)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(application,asset)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(JuiceBoxCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the JuiceBox smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optIntoORA()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoOra(args: MethodArgs<'optIntoORA()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(JuiceBoxCallFactory.optIntoOra(args, params))
  }

  /**
   * Calls the mine(pay,address)void ABI method.
   *
   * Mine ORA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mine(args: MethodArgs<'mine(pay,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(JuiceBoxCallFactory.mine(args, params))
  }

  /**
   * Calls the claim(uint64,address,asset)void ABI method.
   *
   * Claim ORA proportional to the amount juiced in the given epoch
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claim(args: MethodArgs<'claim(uint64,address,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(JuiceBoxCallFactory.claim(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<JuiceBox['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get orangeApp() {
        return JuiceBoxClient.getIntegerState(state, 'orangeApp')
      },
      get orangeAsa() {
        return JuiceBoxClient.getIntegerState(state, 'orangeAsa')
      },
      get epoch() {
        return JuiceBoxClient.getIntegerState(state, 'epoch')
      },
      get totalOra() {
        return JuiceBoxClient.getIntegerState(state, 'totalOra')
      },
    }
  }

  public compose(): JuiceBoxComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optIntoOra(args: MethodArgs<'optIntoORA()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoOra(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mine(args: MethodArgs<'mine(pay,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mine(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claim(args: MethodArgs<'claim(uint64,address,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as JuiceBoxComposer
  }
}
export type JuiceBoxComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optIntoORA()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoOra(args: MethodArgs<'optIntoORA()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): JuiceBoxComposer<[...TReturns, MethodReturn<'optIntoORA()void'>]>

  /**
   * Calls the mine(pay,address)void ABI method.
   *
   * Mine ORA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mine(args: MethodArgs<'mine(pay,address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): JuiceBoxComposer<[...TReturns, MethodReturn<'mine(pay,address)void'>]>

  /**
   * Calls the claim(uint64,address,asset)void ABI method.
   *
   * Claim ORA proportional to the amount juiced in the given epoch
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(args: MethodArgs<'claim(uint64,address,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): JuiceBoxComposer<[...TReturns, MethodReturn<'claim(uint64,address,asset)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the JuiceBox smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): JuiceBoxComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): JuiceBoxComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<JuiceBoxComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<JuiceBoxComposerResults<TReturns>>
}
export type JuiceBoxComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type JuiceBoxComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
